SELECT * FROM SUBJECTS;
SELECT * FROM PROFESSORS;
SELECT * FROM EXAMS;
SELECT * FROM STUDENTS;
SELECT * FROM SCORES;
SELECT * FROM CIDO;
--공통코드

--1. 부산에 사는 학생들의 음악점수 -- 단 시험을 치지 않았으면 0점 처리
SELECT * FROM SCORES;
SELECT * FROM EXAMS;
SELECT * FROM SUBJECTS;

INSERT INTO EXAMS VALUES('P009', 'S006', '음악시험2');
INSERT INTO SCORES VALUES('S005', 'P009', 'S006', 1, 89.10);

--P009	S006	음악시험2  P008	S006	음악 시험
SELECT T4.SID, T4.SNAME, T3.SUBID, T3.SNAME, T1.SCORE
FROM SCORES T1, EXAMS T2, SUBJECTS T3, STUDENTS T4
WHERE T1.SUBID = T2.SUBID AND  T1.PID = T2.PID
AND T1.SUBID = T3.SUBID
AND T1.SID = T4.SID
AND T4.SADDR = 'C017'
--AND T3.SUBID = 'S006'
AND ((T2.PID = 'P009' AND T2.SUBID = 'S006') OR (T2.PID = 'P008' AND T2.SUBID = 'S006'))
ORDER BY T1.SID
;

--2. 출제교수별로 학생들의 평균점 
--1. 시험안친학생들 무시
SELECT T3.PID, T3.PNAME,  SUM(T1.SCORE) AS TLT, ROUND(AVG(T1.SCORE), 1) AS AVERG,
        --컬럼은 다른컬럼에 전혀 무관하게 만들어집니다.
        ROW_NUMBER() OVER(ORDER BY ROUND(AVG(T1.SCORE), 1) DESC),
        RANK() OVER(ORDER BY ROUND(AVG(T1.SCORE), 1) DESC),
        DENSE_RANK() OVER(ORDER BY ROUND(AVG(T1.SCORE), 1) DESC)
FROM SCORES T1, EXAMS T2, PROFESSORS T3
WHERE T1.PID = T2.PID AND T1.SUBID = T2.SUBID
AND T2.PID = T3.PID
GROUP BY T3.PID, T3.PNAME
ORDER BY T3.PID ASC
;

SELECT * FROM SCORES;

SELECT * FROM
(
    SELECT T1.NAME, T1.SCORE, 
        ROW_NUMBER() OVER(ORDER BY T1.SCORE ASC) AS RN,
        RANK() OVER(ORDER BY T1.SCORE ASC) AS RNK,
        DENSE_RANK() OVER(ORDER BY T1.SCORE ASC) AS DENSERNK
    FROM
    (
        SELECT 'A' AS NAME, 70 AS SCORE FROM DUAL UNION ALL
        SELECT 'B' AS NAME, 80 AS SCORE FROM DUAL UNION ALL
        SELECT 'C' AS NAME, 80 AS SCORE FROM DUAL UNION ALL
        SELECT 'D' AS NAME, 80 AS SCORE FROM DUAL UNION ALL
        SELECT 'E' AS NAME, 90 AS SCORE FROM DUAL UNION ALL
        SELECT 'F' AS NAME, 90 AS SCORE FROM DUAL UNION ALL
        SELECT 'G' AS NAME, 100 AS SCORE FROM DUAL
    ) T1
) T2
WHERE T2.RNK = 1
;



--2. 시험안친학생들 포함  - 못구해 -- 시험을 안친사람이 어떤 시험을 안쳤는지 알수가 없어요

--과목별  시험결과 순위  -- 평균순위
--1. 안친사람 제외  -- 10분
SELECT T1.SUBID, T1.SNAME, SUM(T3.SCORE) AS TLT, ROUND(AVG(T3.SCORE), 1) AS AVERG,
        RANK() OVER(ORDER BY ROUND(AVG(T3.SCORE), 1) DESC) AS RNK
FROM SUBJECTS T1, EXAMS T2, SCORES T3
WHERE T1.SUBID = T2.SUBID
AND T2.PID = T3.PID AND T2.SUBID = T3.SUBID
GROUP BY T1.SUBID, T1.SNAME
;

--2. 안친사람 0 점처리 -- 30분
--10명이 학생이 6과목을 시험치면 60개
SELECT A.SUBID, A.SUBNAME, SUM(B.SCORE), ROUND(AVG(NVL(B.SCORE,0)),1) 
    ,RANK() OVER(ORDER BY ROUND(AVG(NVL(B.SCORE,0)),1) DESC) AS RNK
FROM
(
    SELECT T1.SID, T1.SNAME, T2.SUBID, T2.SNAME AS SUBNAME 
    FROM STUDENTS T1, SUBJECTS T2
) A, SCORES B
WHERE A.SID = B.SID(+) AND A.SUBID = B.SUBID(+)
GROUP BY A.SUBID, A.SUBNAME
ORDER BY A.SUBID ASC
;

SELECT A.SUBID, A.SUBNAME, NVL(B.SCORE, 0) FROM
(
    SELECT T1.SID, T1.SNAME, T2.SUBID, T2.SNAME AS SUBNAME 
    FROM STUDENTS T1, SUBJECTS T2
) A, SCORES B
WHERE A.SID = B.SID(+) AND A.SUBID = B.SUBID(+)
;

SELECT T1.CODENAME, NVL(T2.AVERGE, 0) AS AVERAGE FROM CIDO T1,
(
    SELECT C.CODEID, C.CODENAME, ROUND(AVG(NVL(B.SCORE, 0)),1) AS AVERGE FROM
    (
        SELECT T1.SID, T1.SNAME, T1.SADDR, T2.SUBID, T2.SNAME AS SUBNAME 
        FROM STUDENTS T1, SUBJECTS T2
    ) A, SCORES B, CIDO C
    WHERE A.SID = B.SID(+) AND A.SUBID = B.SUBID(+)
    AND A.SADDR = C.CODEID
    GROUP BY C.CODEID, C.CODENAME
) T2
WHERE T1.CODEID = T2.CODEID(+)
;

--3. 각시도별 점수 순위 -- 0점처리 포함


--데이터의 한글데이터는 오타가 없습니다.
--지역중에 교수가 사는 지역들이 있어요 그런데 그 지역중에 학생이 살고 있지 않은 지역을 찾는다.
--단 현재의 데이터를 손대지 마세요
--제대로 JOIN 이해했나??
SELECT * FROM
(
    SELECT CODEID, T2.CODENAME FROM STUDENTS T1, CIDO T2
    WHERE T1.SADDR = T2.CODEID
    GROUP BY T2.CODEID, T2.CODENAME
) A, PROFESSORS B
WHERE A.CODENAME = B.PADDR(+)
AND B.PADDR IS NULL
;

SELECT * FROM
(
    SELECT PADDR FROM PROFESSORS
    GROUP BY PADDR
) A
,
(
    SELECT CODEID, T2.CODENAME FROM STUDENTS T1, CIDO T2
    WHERE T1.SADDR = T2.CODEID
) B
WHERE A.PADDR = B.CODENAME(+)
;

SELECT * FROM STUDENTS;
SELECT * FROM PROFESSORS;

--
--DROP TABLE TIMETABLE
CREATE TABLE TIMETABLE   -- SELF JOIN
(
    WORKID      CHAR(4)     PRIMARY KEY,
    STARTTIME   VARCHAR2(4) NOT NULL,
    ENDTIME   VARCHAR2(4) NOT NULL
);
SELECT * FROM TIMETABLE;
INSERT INTO TIMETABLE VALUES('0001', '0800', '0850');
INSERT INTO TIMETABLE VALUES('0002', '0900', '0950'); 
INSERT INTO TIMETABLE VALUES('0003', '1000', '1050');
INSERT INTO TIMETABLE VALUES('0004', '1100', '1150');
INSERT INTO TIMETABLE VALUES('0005', '1200', '1250');
INSERT INTO TIMETABLE VALUES('0006', '1300', '1350');
INSERT INTO TIMETABLE VALUES('0007', '1400', '1450');
INSERT INTO TIMETABLE VALUES('0008', '1500', '1550');

SELECT T2.STARTTIME || ' ~ ' || T2.ENDTIME AS WORKTIME,
       T2.ENDTIME || ' ~ ' || T1.STARTTIME AS RESTTIME
FROM
(
SELECT WORKID, STARTTIME, ENDTIME,
    ROW_NUMBER() OVER(ORDER BY STARTTIME ASC) AS RN
FROM TIMETABLE
) T1
,
(
    SELECT WORKID, STARTTIME, ENDTIME, RN + 1 AS RN FROM
    (
        SELECT WORKID, STARTTIME, ENDTIME,
            ROW_NUMBER() OVER(ORDER BY STARTTIME ASC) AS RN
        FROM TIMETABLE
    ) 
) T2
WHERE T1.RN(+) = T2.RN
;
/*
1교시 : 09:00 ~ 09:50
휴식 : 09:50 ~ 10:00
2교시 : 10:00 ~ 10:50
휴식 : 10:50 ~ 11:00
*/
--COMMIT;

CREATE TABLE TEST
(
        IDX     INT     PRIMARY KEY,
        SCORE   INT     NOT NULL
);
--COMMIT;
SELECT * FROM TEST;
INSERT INTO TEST VALUES(1, 43);
INSERT INTO TEST VALUES(2, 67);
INSERT INTO TEST VALUES(3, 98);
INSERT INTO TEST VALUES(4, 123);
INSERT INTO TEST VALUES(5, 156);
INSERT INTO TEST VALUES(6, 111);

--SELF JOIN
SELECT T1.IDX, T1.SCORE, T2.SCORE, T1.SCORE - T2.SCORE AS RESULT 
FROM TEST T1, 
(
    SELECT IDX + 1 AS IDX, SCORE FROM TEST
) T2
WHERE T1.IDX = T2.IDX(+)
ORDER BY T1.IDX
;



