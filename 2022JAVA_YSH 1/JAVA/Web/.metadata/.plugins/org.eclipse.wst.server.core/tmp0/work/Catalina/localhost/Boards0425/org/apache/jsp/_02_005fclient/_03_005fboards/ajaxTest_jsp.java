/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2022-05-09 06:45:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._02_005fclient._03_005fboards;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ajaxTest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>new menu(ajax)</title>\r\n");
      out.write("<script>\r\n");
      out.write("	var httpRequestH;\r\n");
      out.write("	var httpRequestL;\r\n");
      out.write("	var getHttpRequest=function(){\r\n");
      out.write("		httpRequestH = new XMLHttpRequest();\r\n");
      out.write("		httpRequestL = new XMLHttpRequest();\r\n");
      out.write("		/*\r\n");
      out.write("		if(window.XMLHttpRequest){\r\n");
      out.write("			httpRequest = new XMLHttpRequest();\r\n");
      out.write("		}else if(window.ActiveXObject){\r\n");
      out.write("			//IE6.0이하\r\n");
      out.write("			httpRequest = new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n");
      out.write("		}\r\n");
      out.write("		*/\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	var callHMenuXml = function(){\r\n");
      out.write("		getHttpRequest();\r\n");
      out.write("		\r\n");
      out.write("		//통신이 완료되면 실행할 메서드\r\n");
      out.write("		httpRequestH.onreadystatechange = setHMenus;\r\n");
      out.write("		//get or post, 데이터 파일 경로, 동기인지(비동기인지)\r\n");
      out.write("		httpRequestH.open(\"post\",\"./ajaxPages/getHmenus.jsp\",true);\r\n");
      out.write("		httpRequestH.send();\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	var callLMenuXml = function(){\r\n");
      out.write("		\r\n");
      out.write("		var selLMenu = document.getElementById(\"hMenu\").value;\r\n");
      out.write("		\r\n");
      out.write("		//통신이 완료되면 실행할 메서드\r\n");
      out.write("		httpRequestL.onreadystatechange = setLMenus;\r\n");
      out.write("		//get or post, 데이터 파일 경로, 동기인지(비동기인지)\r\n");
      out.write("		httpRequestL.open(\"post\",\"/Boards0425/02_client/03_boards/ajaxPages/getLMenus.jsp?selLMenu=\"+selLMenu,true);\r\n");
      out.write("		httpRequestL.send();\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	var setHMenus=function(){\r\n");
      out.write("		var strHTML = \"\";\r\n");
      out.write("		var hMenuID = \"\";\r\n");
      out.write("		var hMenuName = \"\";\r\n");
      out.write("		//통신이 성공했는지 여부\r\n");
      out.write("		if (httpRequestH.readyState==4 && httpRequestH.status == 200){\r\n");
      out.write("			var objXML = httpRequestH.responseXML;\r\n");
      out.write("			var arrHMenu = objXML.getElementsByTagName(\"hMenu\");\r\n");
      out.write("			\r\n");
      out.write("			for(var i=0;i<arrHMenu.length;i++){\r\n");
      out.write("				hMenuID = arrHMenu[i].childNodes[0].childNodes[0].nodeValue;\r\n");
      out.write("				hMenuName = arrHMenu[i].childNodes[1].childNodes[0].nodeValue;\r\n");
      out.write("				\r\n");
      out.write("				strHTML += \"<option value='\"+hMenuID+\"'>\";\r\n");
      out.write("				strHTML += hMenuName;\r\n");
      out.write("				strHTML += \"</option>\";\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("		//else{alert(\"쉴패~~!~!~\");}\r\n");
      out.write("		\r\n");
      out.write("		document.getElementById(\"hMenu\").innerHTML = strHTML;\r\n");
      out.write("		\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	var setLMenus = function(obj){\r\n");
      out.write("		var strHTML = \"\";\r\n");
      out.write("		var lMenuID = \"\";\r\n");
      out.write("		var lMenuName = \"\";\r\n");
      out.write("		var lMenuUrl = \"\";\r\n");
      out.write("		if (httpRequestL.readyState==4 && httpRequestL.status == 200){\r\n");
      out.write("\r\n");
      out.write("			var objXML = httpRequestL.responseXML;\r\n");
      out.write("			var arrLMenu = objXML.getElementsByTagName(\"lMenu\");\r\n");
      out.write("			\r\n");
      out.write("			for(var i=0;i<arrLMenu.length;i++){\r\n");
      out.write("			lMenuID = arrLMenu[i].childNodes[0].childNodes[0].nodeValue;\r\n");
      out.write("			lMenuName = arrLMenu[i].childNodes[1].childNodes[0].nodeValue;\r\n");
      out.write("			lMenuUrl = arrLMenu[i].childNodes[2].childNodes[0].nodeValue;\r\n");
      out.write("			\r\n");
      out.write("			strHTML += \"<option value='\"+lMenuID+\"'>\";\r\n");
      out.write("			strHTML += lMenuName;\r\n");
      out.write("			strHTML += \"</option>\";\r\n");
      out.write("			\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		document.getElementById(\"lMenu\").innerHTML = strHTML;\r\n");
      out.write("		\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div id=\"msg\">\r\n");
      out.write("		<select id=\"hMenu\" onchange=\"callLMenuXml()\">\r\n");
      out.write("		</select>\r\n");
      out.write("		<select id=\"lMenu\" onchange=\"\">\r\n");
      out.write("		</select>\r\n");
      out.write("	</div>\r\n");
      out.write("	<input type=\"button\" value=\"메뉴나와랏\" onclick=\"callHMenuXml()\"/>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
