
-- 정렬
-- ORDER BY 컬럼명 정렬방식(오름/내림)
SELECT * FROM EXAMS ORDER BY SCORE ASC;

-- 50점 이상인 점수만 내림차순으로 정렬
SELECT * FROM EXAMS WHERE SCORE>=50 ORDER BY SCORE DESC;


SELECT * FROM PRODUCT;

SELECT * FROM ORDER_TBL;

-- 테이블 삭제(객체 삭제시 롤백 불가)
DROP TABLE 테이블명;

--------------------------------------------
-- 슈퍼 운영
-- 도매상으로부터 상품을 받아온다
-- 고객이 상품을 구매한다

-- 고객의 구매 : 상품이 존재해야지만 구매 가능
-- 도매상으로부터의 구매 : 없는 상품을 들고 온다

-- 고객 테이블 : 고객ID, 이름, 성별, 나이
-- 상품 테이블 : 상품ID, 상품명, 중량( 재고x, 우리가 파는 상품의 목록같은 개념) -> 재고는 함수 이용
-- 입고 테이블 : 순번, 상품ID, 도매상ID, 단가, 입고수량
-- 도매상 테이블 : 도매상ID, 상점이름, 연락처, 주소
-- 판매 테이블 : 고객ID, 상품ID, 구매가격, 구매수량

--1. 도매상
CREATE TABLE WHOLESALE(
    WID     CHAR(3)         NOT NULL    PRIMARY KEY,
    WNAME   VARCHAR2(30)    NOT NULL,
    WTEL    VARCHAR2(11)    NULL,
    WADDR   VARCHAR2(20)    NULL
);

INSERT INTO WHOLESALE(WID, WNAME, WTEL, WADDR)
VALUES('W01','서울식품','01011112222','서울');
INSERT INTO WHOLESALE(WID, WNAME, WTEL, WADDR)
VALUES('W02','옥션','01022222222','서울'); -- 거래X
INSERT INTO WHOLESALE(WID, WNAME, WTEL, WADDR)
VALUES('W03','쿠팡','01011113333','경기');
INSERT INTO WHOLESALE(WID, WNAME, WTEL, WADDR)
VALUES('W04','G마켓','01011114444','부산');

--2. 상품리스트 (단가 넣지말기 : 변동 가능한 행위의 결과이므로)
CREATE TABLE PRODUCTS(
    PID         CHAR(3)         NOT NULL    PRIMARY KEY,
    PNAME       VARCHAR2(30)    NOT NULL,
    PWEIGHT     NUMBER(4)       NULL
);

INSERT INTO PRODUCTS(PID, PNAME, PWEIGHT) VALUES('P01','콜라', 100);
INSERT INTO PRODUCTS(PID, PNAME, PWEIGHT) VALUES('P02','콜라', 300); -- 입고X
INSERT INTO PRODUCTS(PID, PNAME, PWEIGHT) VALUES('P03','젤리', 50);
INSERT INTO PRODUCTS(PID, PNAME, PWEIGHT) VALUES('P04','젤리', 80);
INSERT INTO PRODUCTS(PID, PNAME, PWEIGHT) VALUES('P05','새우깡', 200);
INSERT INTO PRODUCTS(PID, PNAME, PWEIGHT) VALUES('P06','새우깡', 500); -- 입고X
INSERT INTO PRODUCTS(PID, PNAME, PWEIGHT) VALUES('P07','새우깡', 1000);
INSERT INTO PRODUCTS(PID, PNAME, PWEIGHT) VALUES('P08','라면', 200);
INSERT INTO PRODUCTS(PID, PNAME, PWEIGHT) VALUES('P09','라면', 300);
INSERT INTO PRODUCTS(PID, PNAME, PWEIGHT) VALUES('P10','아이스크림', 300);

--3. 고객
--DROP TABLE CUSTOMERS;
CREATE TABLE CUSTOMERS(
    CID     CHAR(3)         NOT NULL    PRIMARY KEY,
    CNAME   VARCHAR2(20)    NOT NULL,
    CAGE    NUMBER(3)       NOT NULL,
    CGENDER CHAR(1)         NOT NULL --남:M/여:F
);

INSERT INTO CUSTOMERS(CID, CNAME, CAGE, CGENDER) VALUES('C01' ,'홍길동' , 33, 'M');
INSERT INTO CUSTOMERS(CID, CNAME, CAGE, CGENDER) VALUES('C02' ,'홍길순' , 29, 'F');
INSERT INTO CUSTOMERS(CID, CNAME, CAGE, CGENDER) VALUES('C03' ,'전우치' , 49, 'M');
INSERT INTO CUSTOMERS(CID, CNAME, CAGE, CGENDER) VALUES('C04' ,'강철식' , 54, 'M');
INSERT INTO CUSTOMERS(CID, CNAME, CAGE, CGENDER) VALUES('C05' ,'김꽃분' , 37, 'F');
INSERT INTO CUSTOMERS(CID, CNAME, CAGE, CGENDER) VALUES('C06' ,'최순수' , 33, 'M');
INSERT INTO CUSTOMERS(CID, CNAME, CAGE, CGENDER) VALUES('C07' ,'박순이' , 40, 'F');

SELECT * FROM WHOLESALE;
SELECT * FROM PRODUCTS;
SELECT * FROM CUSTOMERS;


-- 도매상에서 상품을 입고한다
CREATE TABLE STORES(
    IDX     INT         NOT NULL    PRIMARY KEY,
    WID     CHAR(3)     NOT NULL, -- 도매상ID
    PID     CHAR(3)     NOT NULL, -- 상품ID
    COST    NUMBER(8)   NOT NULL, -- 단가
    QTY     NUMBER(5)   NOT NULL -- 수량
);

INSERT INTO STORES(IDX, WID, PID, COST, QTY) VALUES(1, 'W01', 'P01', 330, 10);
INSERT INTO STORES(IDX, WID, PID, COST, QTY) VALUES(2, 'W03', 'P01', 350, 20);
INSERT INTO STORES(IDX, WID, PID, COST, QTY) VALUES(3, 'W04', 'P03', 220, 30);
INSERT INTO STORES(IDX, WID, PID, COST, QTY) VALUES(4, 'W04', 'P04', 370, 20);
INSERT INTO STORES(IDX, WID, PID, COST, QTY) VALUES(5, 'W03', 'P05', 500, 20);
INSERT INTO STORES(IDX, WID, PID, COST, QTY) VALUES(6, 'W03', 'P07', 800, 15);
INSERT INTO STORES(IDX, WID, PID, COST, QTY) VALUES(7, 'W01', 'P05', 520, 22);
INSERT INTO STORES(IDX, WID, PID, COST, QTY) VALUES(8, 'W01', 'P08', 550, 31);
INSERT INTO STORES(IDX, WID, PID, COST, QTY) VALUES(9, 'W04', 'P08', 570, 17);
INSERT INTO STORES(IDX, WID, PID, COST, QTY) VALUES(10, 'W03', 'P09', 690, 30);
INSERT INTO STORES(IDX, WID, PID, COST, QTY) VALUES(11, 'W03', 'P09', 640, 13);
INSERT INTO STORES(IDX, WID, PID, COST, QTY) VALUES(12, 'W01', 'P10', 1240, 20);
INSERT INTO STORES(IDX, WID, PID, COST, QTY) VALUES(13, 'W03', 'P10', 1290, 30);
INSERT INTO STORES(IDX, WID, PID, COST, QTY) VALUES(14, 'W04', 'P10', 1310, 8);
INSERT INTO STORES(IDX, WID, PID, COST, QTY) VALUES(15, 'W04', 'P03', 250, 9);

SELECT * FROM STORES;

--COMMIT

--1. 서울식품('W01')에서 입고한 목록
SELECT * FROM STORES WHERE WID='W01';

--2. 서울식품에서 입고한 데이터를 순번, 도매상, 상품, 총금액으로 출력
SELECT IDX, WID, PID, COST, QTY, COST*QTY FROM STORES WHERE WID='W01';


--3. 각 도매상별 집계(집계함수) : ORACLE의 내장함수 이용 / COL이 한 개

--3-1. 합계(SUM) : 입고된 상품의 총 수량
SELECT SUM(QTY) FROM STORES;
-- 서울식품에서 입고한 상품들의 총 수량
SELECT * FROM STORES WHERE WID='W01';
SELECT SUM(QTY) FROM STORES WHERE WID='W01';

--3-2. 평균(AVG) : 입고 시 상품의 평균 수량
SELECT AVG(QTY) FROM STORES;
-- 옥션에서 입고한 상품들 평균 수량
SELECT AVG(QTY) FROM STORES WHERE WID='W03';
-- G마켓에서 입고 시 들어간 총/1회 평균 금액
SELECT SUM(COST*QTY), AVG(COST*QTY) FROM STORES WHERE WID='W04';

--3-3. 데이터의 수 세기(COUNT, ROW의 개수) : 입고한 횟수
SELECT COUNT(IDX) FROM STORES;
-- 서울식품에서 입고한 횟수
SELECT COUNT(*) FROM STORES WHERE WID='W01';

-- 집계함수를 사용하는 이유
-- 각 도매상별 몇 번씩 입고되었는지 확인 
SELECT COUNT(*) FROM STORES WHERE WID='W01';
SELECT COUNT(*) FROM STORES WHERE WID='W02';
SELECT COUNT(*) FROM STORES WHERE WID='W03';
SELECT COUNT(*) FROM STORES WHERE WID='W04';
-- 그룹 만들기(특정그룹별로 보고 싶을 때)
-- 한번에 WID별로 모든 값을 표현하고 싶다면? : WID로 그룹 생성
SELECT WID, COUNT(*) FROM STORES GROUP BY WID;
-- 각 도매상별 입고 개수를 보여주고 싶다
SELECT WID, SUM(QTY) FROM STORES GROUP BY WID;

-- 같은 그룹이라면 다른 집계함수 여러 개 사용 가능
-- 이해 안될때는 엑셀로 만들어보기

-- 도매상별 : 입고량, 입고횟수, 1회입고당 평균수량, 총 거래금액
SELECT WID, SUM(QTY), COUNT(*), AVG(QTY), SUM(COST*QTY) FROM STORES GROUP BY WID;
-- 상품별 입고된 총금액, 총개수, 평균단가(싼값에 많이사면 내려가고...)
SELECT PID, SUM(COST*QTY), SUM(QTY), SUM(COST*QTY)/SUM(QTY) 
FROM STORES GROUP BY PID ORDER BY PID ASC;
-- 회원 성별 별 평균나이
SELECT CGENDER, AVG(CAGE) FROM CUSTOMERS GROUP BY CGENDER;
-- 지역별 도매상 수
SELECT WADDR, COUNT(*) FROM WHOLESALE GROUP BY WADDR;

----------------------------------
-- JOIN
-- 두 테이블을 공통된 필드 기준으로 합쳐서 표시
SELECT * FROM STORES T1, WHOLESALE T2
WHERE T1.WID=T2.WID;


-- 고객 테이블
--  고객아이디  고객명    성별
--      CO1     강기자     여
--      CO2     김두일     남
--      CO3     강기림     여
--      CO4     조상우     남

-- 영화 테이블
--  영화아이디   제목  장르
--      M01     영화1  액션
--      M02     영화2  코미디
--      M03     영화3  멜로
--      M04     영화4  코미디

-- 예매 테이블
--  순번  고객  영화  인원수
--  1     C01   M01     3
--  2     C01   M03     2
--  3     C02   M03     4
--  4     C02   M03     1
--  5     C02   M02     2
--  6     C04   M01     4
--  7     C02   M01     2
--  8     C02   M04     4


-- '고객'이 '영화'를 '예매한다'
CREATE TABLE MEMBERS(
    MID     CHAR(3)         NOT NULL    PRIMARY KEY,
    MNAME   VARCHAR2(30)    NOT NULL,
    MGENDER CHAR(1)         NOT NULL
);

INSERT INTO MEMBERS(MID, MNAME, MGENDER) VALUES('M01', '강기자', 'F');
INSERT INTO MEMBERS(MID, MNAME, MGENDER) VALUES('M02', '김두일', 'M');
INSERT INTO MEMBERS(MID, MNAME, MGENDER) VALUES('M03', '강기림', 'F');
INSERT INTO MEMBERS(MID, MNAME, MGENDER) VALUES('M04', '조상우', 'M');

SELECT * FROM MEMBERS;
--C

CREATE TABLE MOVIES(
    MOV_ID  CHAR(5)         NOT NULL    PRIMARY KEY,
    MOVNAME VARCHAR2(50)    NOT NULL,
    MGBN    VARCHAR2(30)    NOT NULL
);

INSERT INTO MOVIES(MOV_ID, MOVNAME, MGBN) VALUES('MOV01', '영화1', '액션');
INSERT INTO MOVIES(MOV_ID, MOVNAME, MGBN) VALUES('MOV02', '영화2', '코미디');
INSERT INTO MOVIES(MOV_ID, MOVNAME, MGBN) VALUES('MOV03', '영화3', '멜로');
INSERT INTO MOVIES(MOV_ID, MOVNAME, MGBN) VALUES('MOV04', '영화4', '코미디');


CREATE TABLE RESERVATIONS(
    IDX     INT         NOT NULL    PRIMARY KEY,
    MID     CHAR(3)     NOT NULL,
    MOVID   CHAR(5)     NOT NULL,
    QTY     INT         NOT NULL
);

INSERT INTO RESERVATIONS VALUES(1, 'M01', 'MOV01', 3);
INSERT INTO RESERVATIONS VALUES(2, 'M01', 'MOV03', 2);
INSERT INTO RESERVATIONS VALUES(3, 'M02', 'MOV03', 4);
INSERT INTO RESERVATIONS VALUES(4, 'M02', 'MOV03', 1);
INSERT INTO RESERVATIONS VALUES(5, 'M02', 'MOV02', 2);
INSERT INTO RESERVATIONS VALUES(6, 'M04', 'MOV01', 4);
INSERT INTO RESERVATIONS VALUES(7, 'M02', 'MOV01', 2);
INSERT INTO RESERVATIONS VALUES(8, 'M02', 'MOV04', 4);

SELECT * FROM RESERVATIONS;
--C

--JOIN(INNER)
SELECT * FROM MEMBERS T1 JOIN RESERVATIONS T2
ON T1.MID=T2.MID;

SELECT T1.MID, T1.MNAME, T1.MGENDER, T2.MOVID, T2.QTY, T3.MOVNAME
FROM MEMBERS T1, RESERVATIONS T2, MOVIES T3
WHERE T1.MID=T2.MID AND T2.MOVID=T3.MOV_ID AND T2.QTY>3;



















