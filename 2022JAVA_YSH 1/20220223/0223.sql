
-- 계층형 데이터에서 제3정규화를 지키면 테이블이 끝없이 많아진다
-- 역정규화를 이용해 한 테이블에 표현한다

-- 공통코드테이블(과목/시험 등 주업무 관련 X, 주소/단위 등에 사용)
--  코드   코드명     부모코드   레벨
--  C00   시도코드      NULL       0
--  C01     서울        C00        1
--  C02     부산        C00        1
--  C03     울산        C00        1
--  C04     경남        C00        1
--  C05     금정구      C02        2
--  C06     김해시      C04        2
--  C07     동래구      C02        2
--  C08     장전동      C05        3
--  C09     구서동      C05        3
--  C10     창원시      C04        3




CREATE TABLE CODES(
    CODEID      CHAR(4)         PRIMARY KEY,
    CODENAME    VARCHAR2(200)   NOT NULL,
    PARENTID    CHAR(4)         NULL,
    CODELVL     INT             NOT NULL
);



INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C001','시도코드값',NULL,0);
--시도
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C002','부산','C001',1);
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C003','경남','C001',1);
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C004','울산','C001',1);

--부산시
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C005','금정구','C002',2);
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C006','동래구','C002',2);
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C007','해운대구','C002',2);
--부산시 금정구
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C008','구서동','C005',3);
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C009','남산동','C005',3);
--부산시 동래구
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C010','칠산동','C006',3);
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C011','연산동','C006',3);
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C012','사직동','C006',3);
--부산시 해운대구
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C013','우동','C007',3);
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C014','좌동','C007',3);

--경남
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C015','김해시','C003',2);
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C016','창원시','C003',2);
--경남 김해시
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C017','외동','C015',3);
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C018','내동','C015',3);
--경남 창원시
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C019','창원구','C016',3);
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C020','마산구','C016',3);
--경남 창원시 창원구
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C021','사파정동','C019',4);
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C022','성산동','C019',4);
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C023','의창동','C019',4);
--경남 창원시 마산구
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C024','합포동','C020',4);
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C025','양덕동','C020',4);
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C026','의성동','C020',4);

--울산시
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C027','동구','C004',2);
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C028','남구','C004',2);
--울산시 동구
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C029','방어동','C027',3);
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C030','전하동','C027',3);
--울산시 남구
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C031','신정1동','C028',3);
INSERT INTO CODES(CODEID, CODENAME, PARENTID, CODELVL) VALUES('C032','신정2동','C028',3);

SELECT * FROM CODES;
--C

--CODELVL에 따라 CODENAME의 왼쪽에 공백 넣기
SELECT CODEID, LPAD(' ',CODELVL*1)||CODENAME, CODELVL 
FROM CODES START WITH PARENTID IS NULL 
CONNECT BY PRIOR CODEID=PARENTID;
-- START WITH ~ CONNECT BY PRIOR


--부산
SELECT * FROM CODES WHERE PARENTID='C002';
--금정구
SELECT * FROM CODES WHERE PARENTID='C005';
--구서동
SELECT * FROM CODES WHERE PARENTID='C008';




--주소 바뀌면 다 다시 짜야 함
SELECT T1.SID, T1.SNAME, T2.CODENAME, T3.CODENAME, T4.CODENAME
FROM STUDENTS T1, CODES T2, CODES T3, CODES T4
WHERE T1.SADDR1=T2.CODEID
    AND T1.SADDR2=T3.CODEID
    AND T1.SADDR3=T4.CODEID;



SELECT * FROM STUDENTS T1, CODES T2, CODES T3, CODES T4, CODES T5
WHERE T1.SADDR=T2.CODEID
    AND T2.PARENTID=T3.CODEID
    AND T3.PARENTID=T4.CODEID
    AND T4.PARENTID=T5.CODEID;




--코드 형태를 가진 값은 전부 CODES 테이블에 넣어도 상관없게 된다
--최상위 메뉴들의 구분자만 기억하면 줄줄이 찾을 수 있다
--혹은 그룹코드의 테이블을 따로 만든다
INSERT INTO CODES VALUES('C033','메뉴트리구조도',NULL,0);
INSERT INTO CODES VALUES('C034','전자제품','C033',1);
INSERT INTO CODES VALUES('C035','화장품','C033',1);


INSERT INTO CODES VALUES('C036','조직도',NULL,0);
INSERT INTO CODES VALUES('C037','생산부','C036',1);
INSERT INTO CODES VALUES('C038','총무부','C036',1);
INSERT INTO CODES VALUES('C039','인사부','C036',1);


SELECT CODEID, LPAD(' ',CODELVL*1)||CODENAME, CODELVL 
FROM CODES START WITH PARENTID IS NULL 
CONNECT BY PRIOR CODEID=PARENTID;

SELECT * FROM CODES;



SELECT * FROM CODES T1, CODES T2, CODES T3, CODES T4
WHERE T1.CODEID=T2.PARENTID(+) AND T1.PARENTID IS NOT NULL
    AND T2.CODEID=T3.PARENTID(+) AND T2.PARENTID IS NOT NULL
    AND T3.CODEID=T4.PARENTID(+) AND T3.PARENTID IS NOT NULL;


---------------------------------------------------------

--내장함수 DECODE *******중요
--DECODE(판단할 컬럼, 판단할 값1, 바꿀 값1, ... , 기본값)
SELECT SID, SNAME, SGENDER FROM STUDENTS;
-- M, F를 남자 여자로 표시하고 싶을 때
SELECT SID, SNAME, DECODE(SGENDER,'M','남자','여자') FROM STUDENTS;
SELECT SID, SNAME, DECODE(SGENDER,'M','남자','F','여자') FROM STUDENTS;



    SELECT B.SID, B.SNAME,
        A.CODENAME1||' '||A.CODENAME2||' '||A.CODENAME3||' '||A.CODENAME4 AS ADDR 
    FROM
    (
        --지역 시군구
        --LEFT JOIN 특성상 모든 데이터가 나옴
        --(경남이후에 창원까지 나와버림/경남 안에 속한 창원만 표시해야 함)
        SELECT T1.CODENAME AS CODENAME1,
            T2.CODENAME AS CODENAME2,
            T3.CODEID AS CODEID3, T3.CODENAME AS CODENAME3,
            T4.CODEID AS CODEID4, T4.CODENAME AS CODENAME4
        FROM CODES T1, CODES T2, CODES T3, CODES T4
        WHERE T1.CODEID=T2.PARENTID(+) AND T1.PARENTID IS NOT NULL
            AND T2.CODEID=T3.PARENTID(+) AND T2.PARENTID IS NOT NULL
            AND T3.CODEID=T4.PARENTID(+) AND T3.PARENTID IS NOT NULL
            --경남 안에 속한 창원만 표시하는 조건
            AND T3.CODELVL != 4
    ) A, STUDENTS B
    --WHERE A.CODEID3=B.SADDR -- 창원시는 예외가 생김
    WHERE DECODE(A.CODEID4, NULL, CODEID3, CODEID4)=B.SADDR;

--------------------------

SELECT CODEID, LPAD(' ',CODELVL*1)||CODENAME, CODELVL 
FROM CODES START WITH PARENTID IS NULL 
CONNECT BY PRIOR CODEID=PARENTID;

--시도코드값만 쓰고 싶은 경우
    --테이블 쪼개지 않고
        --GROUPID 컬럼을 추가
        SELECT CODEID, LPAD(' ',CODELVL*1)||CODENAME, CODELVL 
        FROM CODES 
        WHERE GROUPID='CIDO'
        START WITH PARENTID IS NULL 
        CONNECT BY PRIOR CODEID=PARENTID;



--각 동별로 살고있는 학생 수 : 동이름, 숫자
    SELECT *
    FROM STUDENTS ST, 
    (
        SELECT *
        FROM CODES C
        WHERE C.GROUPID='CIDO'
    ) A
    WHERE ST.SADDR=A.CODENAME;
    
-- 심화 ) 지역별 학생수 표시 : 시, 도, 동별로





-----------------
    --블럭의 순서를 바꾸고 싶을 때 : ORDER SIBLINGS BY ~
    SELECT LPAD(' ',CODELVL*1)||CODENAME, CODESEQ
    FROM CODES 
    WHERE GROUPID='CIDO' 
    START WITH PARENTID IS NULL 
    CONNECT BY PRIOR CODEID=PARENTID
    ORDER SIBLINGS BY CODESEQ
    ;
    
    --GROUPID가 무슨 의미인지+설명 : 새로운 테이블로
    CREATE TABLE GROUPS(
        GROUPID     CHAR(4)         PRIMARY KEY,
        GROUPNAME   VARCHAR2(100)   NOT NULL,
        GROUPTXT    VARCHAR2(4000)  NULL
    );

    INSERT INTO GROUPS(GROUPID, GROUPNAME, GROUPTXT) VALUES('CIDO', '주소관리', '시/도 주소');
    INSERT INTO GROUPS(GROUPID, GROUPNAME, GROUPTXT) VALUES('MENU', '메뉴관리', '사이트 메뉴');
    INSERT INTO GROUPS(GROUPID, GROUPNAME, GROUPTXT) VALUES('PART', '조직관리', '회사 조직');

    SELECT T2.CODEID, T2.CODENAME
    FROM GROUPS T1, CODES T2
    WHERE T1.GROUPID=T2.GROUPID
        AND T1.GROUPID='CIDO'
    START WITH PARENTID IS NULL 
    CONNECT BY PRIOR CODEID=PARENTID
    ORDER SIBLINGS BY CODESEQ
    ;


----------------------------------
--공통코드테이블
SELECT * FROM GROUPS;
SELECT * FROM CODES;
-- 엔티티
SELECT * FROM STUDENTS;
SELECT * FROM SUBJECTS;
SELECT * FROM PROFESSORS;
-- 교수가 낸 시험
SELECT * FROM EXAMS;
-- 학생이 시험을 본 점수
SELECT * FROM SCORES;



















