
-- 회원테이블(엔티티)
--  ID      PASSWORD    NAME    GENDER    AGE
--  AAA     1111       홍길동      M       25
--  BBB     2222       전우치      M       31
--  CCC     3333       강기구      M       33
--  DDD     5555       최수궁      F       22
--  EEE     7777       홍길동      M       27

-- 로그인테이블(행위)
--  ID      로그인 일시  성공여부
--  AAA     20220217        Y
--  BBB     20220217        N
--  BBB     20220217        N
--  BBB     20220217        Y
--  AAA     20220218        Y
--  BBB     20220218        Y
--  AAA     20220218        Y
--  AAA     20220218        Y
--  AAA     20220218        Y
--  BBB     20220218        Y
--  BBB     20220218        Y
--  BBB     20220218        Y
--  BBB     20220218        Y

-- 회원과 일대 다의 관계에 있는 로그인테이블

CREATE TABLE MEMS(
    ID      VARCHAR2(20)    NOT NULL    PRIMARY KEY,
    PASS    VARCHAR2(20)    NOT NULL,
    NAME    VARCHAR2(30)    NOT NULL
);

INSERT INTO MEMS(ID, PASS, NAME) VALUES('AAA', '1111', '홍길동');
INSERT INTO MEMS(ID, PASS, NAME) VALUES('BBB', '1111', '홍길순');
INSERT INTO MEMS(ID, PASS, NAME) VALUES('CCC', '1111', '전우치');
INSERT INTO MEMS(ID, PASS, NAME) VALUES('DDD', '1111', '홍수도');

SELECT * FROM MEMS;
--C


CREATE TABLE LOGIN(
    LIDX        NUMBER(2)       NOT NULL    PRIMARY KEY,
    ID          VARCHAR2(20)    NOT NULL,
    LOGINDATE   VARCHAR2(20)    NOT NULL,
    LOGINYN     CHAR(1)         NOT NULL --Y/N
);

INSERT INTO LOGIN(LIDX, ID, LOGINDATE, LOGINYN) VALUES(1,'AAA','20220215','Y');
INSERT INTO LOGIN(LIDX, ID, LOGINDATE, LOGINYN) VALUES(2,'BBB','20220215','N');
INSERT INTO LOGIN(LIDX, ID, LOGINDATE, LOGINYN) VALUES(3,'AAA','20220215','N');
INSERT INTO LOGIN(LIDX, ID, LOGINDATE, LOGINYN) VALUES(4,'AAA','20220215','Y');
INSERT INTO LOGIN(LIDX, ID, LOGINDATE, LOGINYN) VALUES(5,'BBB','20220215','Y');
INSERT INTO LOGIN(LIDX, ID, LOGINDATE, LOGINYN) VALUES(6,'AAA','20220216','N');
INSERT INTO LOGIN(LIDX, ID, LOGINDATE, LOGINYN) VALUES(7,'BBB','20220216','Y');
INSERT INTO LOGIN(LIDX, ID, LOGINDATE, LOGINYN) VALUES(8,'AAA','20220216','Y');
INSERT INTO LOGIN(LIDX, ID, LOGINDATE, LOGINYN) VALUES(9,'BBB','20220217','Y');
INSERT INTO LOGIN(LIDX, ID, LOGINDATE, LOGINYN) VALUES(10,'AAA','20220217','Y');

SELECT * FROM LOGIN;
--C

-- 로그인 상태 리스트 : 회원아이디, 이름, 로그인날짜, 성공여부
SELECT * FROM LOGIN;
SELECT * FROM MEMS;

SELECT T1.ID, T1.NAME, T2.LOGINDATE, T2.LOGINYN 
FROM MEMS T1, LOGIN T2
WHERE T1.ID=T2.ID
ORDER BY LOGINDATE ASC;

--1. 각 회원별 로그인에 성공한 횟수
SELECT T1.ID, T1.NAME, COUNT(*) -- 각 ID별 + 각 이름별(GROUP BY와 일치하도록)
FROM MEMS T1, LOGIN T2
WHERE T1.ID=T2.ID AND T2.LOGINYN='Y'-- 실패한 횟수 'N'
GROUP BY T1.ID, T1.NAME -- 각 ID별 + 각 이름별
ORDER BY T1.ID ASC;

--2. 한 번도 로그인하지 않은 사람은 어떻게 알 수 있는가
SELECT * FROM MEMS T1, LOGIN T2
WHERE T1.ID=T2.ID(+)  -- LEFT OUTER JOIN(왼쪽 테이블이 중심이므로)
AND T2.ID IS NULL;


-- OUTER JOIN : LEFT / RIGHT
-- 구문 작성시 왼쪽/오른쪽 차이 빼고 기능은 똑같다

--MS SQL의 경우
SELECT * FROM MEMS T1 JOIN LOGIN T2 ON T1.ID=T2.ID;

-- COUNT는 OUTER JOIN에서의 NULL인 경우도 1로 세어버린다
-- COUNT의 괄호 안에 NULL인 경우를 넣으면 제외
SELECT T1.ID, T1.NAME, COUNT(*) 
FROM MEMS T1, LOGIN T2
WHERE T1.ID=T2.ID(+) 
AND T2.LOGINYN='Y' AND T2.ID IS NULL
GROUP BY T1.ID, T1.NAME 
ORDER BY T1.ID ASC;


-- 2월 1일부터 2월 28일 사이에 로그인한 횟수 목록?
-- 날짜별 로그인 횟수 구하기
SELECT LOGINDATE, COUNT(*) FROM LOGIN
GROUP BY LOGINDATE;


------------------------------------
CREATE TABLE STRTBL(
    ID      CHAR(10)        NOT NULL,
    PASS    VARCHAR2(10)    NOT NULL
);

SELECT * FROM STRTBL;

INSERT INTO STRTBL(ID, PASS) VALUES('AAAA','AAAA');
INSERT INTO STRTBL(ID, PASS) VALUES('홍길동','홍길동');
--C

SELECT LENGTH(ID), LENGTH(PASS) FROM STRTBL;
SELECT LENGTHB(ID), LENGTHB(PASS) FROM STRTBL;
-- CHAR는 내가 쓰는 글자수에 상관없이 BYTE를 차지
-- VARCHAR2는 내가 쓰는 글자수가 적으면 그만큼 적게 차지
-- CHAR에는 한글 넣지 말기

CREATE TABLE NUMBERTYPE(
    COL1    INT             NOT NULL,
    COL2    INTEGER         NOT NULL,
    COL3    NUMBER(5)       NOT NULL,   --5자리숫자/소숫점이하로 내려가면 정수로 반올림됨
    COL4    NUMBER(5,3)     NOT NULL    --5자리숫자 중 소숫점이하가 3자리/그냥 5자리 숫자 불가
);

INSERT INTO NUMBERTYPE(COL1,COL2,COL3,COL4)
VALUES(1000000000,1000000000,12345,12.345);
INSERT INTO NUMBERTYPE(COL1,COL2,COL3,COL4)
VALUES(10000000000000,10000000000000,12345,12.345);
INSERT INTO NUMBERTYPE(COL1,COL2,COL3,COL4)
VALUES(1000000000,1000000000,12345,12.345);


SELECT * FROM NUMBERTYPE;


CREATE TABLE DATETYPE(
    DATE1   DATE        NOT NULL,
    DATE2   TIMESTAMP   NOT NULL
);

SELECT * FROM DATETYPE;
INSERT INTO DATETYPE(DATE1,DATE2) VALUES('20220101','20220203');
INSERT INTO DATETYPE(DATE1,DATE2) VALUES('2022-01-01','2022-02-03');
INSERT INTO DATETYPE(DATE1,DATE2) VALUES(SYSDATE, SYSDATE);


SELECT TO_CHAR(SYSDATE, 'YYYYMMDD HH:MI:SS') FROM DUAL;
SELECT TO_CHAR(DATE1, 'YYYYMMDD HH:MI:SS') FROM DATETYPE;
-------
CREATE TABLE NCHARTBL(
    ID  NCHAR(10)       NOT NULL,
    PASS    NVARCHAR2(10)   NOT NULL
);
INSERT INTO NCHARTBL(ID,PASS) VALUES('AAAA','AAAA');
INSERT INTO NCHARTBL(ID,PASS) VALUES('홍길동','홍길동');
INSERT INTO NCHARTBL(ID,PASS) VALUES('木요일','AAAA');
SELECT * FROM NCHARTBL;

---------------------------------------------

SELECT * FROM WHOLESALE;
SELECT * FROM PRODUCTS;
SELECT * FROM CUSTOMERS;
SELECT * FROM STORES;

-- 핵심 문장으로 큰 틀을 잡고 조건을 붙여 나간다
--1. 도매상별 입고한 건수(행위의 수) : 상점아이디, 이름, 건수
SELECT WID, COUNT(*)
FROM STORES
GROUP BY WID;

-- 필드 이름 표시
SELECT W.WID, W.WNAME, COUNT(S.WID) AS 납품수
FROM WHOLESALE W, STORES S
WHERE W.WID=S.WID(+)
GROUP BY W.WID, W.WNAME
ORDER BY COUNT(S.WID) DESC;

--2. 각 도매상별 총 입고 금액 : 상점아이디, 이름, 총금액, 평균금액
SELECT W.WID, W.WNAME, SUM(S.COST*S.QTY) AS 총금액, AVG(S.COST*S.QTY) AS 평균금액
FROM WHOLESALE W, STORES S
WHERE W.WID=S.WID
GROUP BY W.WID, W.WNAME
ORDER BY W.WID ASC;

--3. 각 상품별 입고된 개수와 총금액, 평균금액, 평균단가 : 상품아이디, 상품명, 개수, 총금액, 평균금액, 평균단가
SELECT P.PID, P.PNAME, P.PWEIGHT, 
    SUM(S.QTY) AS 총개수, 
    SUM(S.COST*S.QTY) AS 총금액, 
    AVG(S.COST*S.QTY) AS 평균금액, 
    ROUND(SUM(S.COST*S.QTY)/SUM(S.QTY),0) AS 평균단가
FROM PRODUCTS P, STORES S
WHERE P.PID=S.PID
GROUP BY P.PID, P.PNAME, P.PWEIGHT
ORDER BY P.PID ASC;




-------------------------------

--2월동안 로그인한 사람, 횟수 ? 

--INNER JOIN(ID기준)
SELECT * FROM MEMS M, LOGIN L
WHERE M.ID=L.ID;

--LEFT OUTER JOIN
SELECT * FROM MEMS M, LOGIN L
WHERE M.ID=L.ID(+);

-- 각 성별 평균나이
SELECT * FROM CUSTOMERS;
SELECT CGENDER, AVG(CAGE) AS 평균나이
FROM CUSTOMERS
GROUP BY CGENDER;

-------------------------
-- 구매 테이블
CREATE TABLE SALES(
    IDX     INTEGER     NOT NULL    PRIMARY KEY,
    CID     CHAR(3)     NOT NULL,
    PID     CHAR(3)     NOT NULL,
    COST    NUMBER(6)   NOT NULL,
    QTY     NUMBER(4)   NOT NULL,
    SDATE   VARCHAR2(8) NOT NULL
);

INSERT INTO SALES(IDX, CID, PID, COST, QTY, SDATE)
VALUES(1, 'C01', 'P01', 400, 2, '20200211');
INSERT INTO SALES(IDX, CID, PID, COST, QTY, SDATE)
VALUES(2, 'C01', 'P04', 450, 3, '20200211');
INSERT INTO SALES(IDX, CID, PID, COST, QTY, SDATE)
VALUES(3, 'C02', 'P03', 350, 4, '20200211');
INSERT INTO SALES(IDX, CID, PID, COST, QTY, SDATE)
VALUES(4, 'C02', 'P10', 1500, 3, '20200211');
INSERT INTO SALES(IDX, CID, PID, COST, QTY, SDATE)
VALUES(5, 'C03', 'P04', 470, 3, '20200212');
INSERT INTO SALES(IDX, CID, PID, COST, QTY, SDATE)
VALUES(6, 'C03', 'P05', 700, 8, '20200212');
INSERT INTO SALES(IDX, CID, PID, COST, QTY, SDATE)
VALUES(7, 'C03', 'P10', 1600, 1, '20200212');
INSERT INTO SALES(IDX, CID, PID, COST, QTY, SDATE)
VALUES(8, 'C04', 'P08', 700, 3, '20200213');
INSERT INTO SALES(IDX, CID, PID, COST, QTY, SDATE)
VALUES(9, 'C04', 'P09', 900, 2, '20200213');
INSERT INTO SALES(IDX, CID, PID, COST, QTY, SDATE)
VALUES(10, 'C04', 'P10', 1600, 5, '20200213');
INSERT INTO SALES(IDX, CID, PID, COST, QTY, SDATE)
VALUES(11, 'C05', 'P01', 400, 4, '20200213');
INSERT INTO SALES(IDX, CID, PID, COST, QTY, SDATE)
VALUES(12, 'C05', 'P03', 400, 4, '20200213');
INSERT INTO SALES(IDX, CID, PID, COST, QTY, SDATE)
VALUES(13, 'C05', 'P04', 450, 2, '20200213');
INSERT INTO SALES(IDX, CID, PID, COST, QTY, SDATE)
VALUES(14, 'C01', 'P08', 700, 8, '20200214');
INSERT INTO SALES(IDX, CID, PID, COST, QTY, SDATE)
VALUES(15, 'C01', 'P09', 900, 9, '20200214');

SELECT * FROM WHOLESALE;
SELECT * FROM PRODUCTS;
SELECT * FROM CUSTOMERS;
SELECT * FROM STORES;
SELECT * FROM SALES;
--C

--1. 회원들의 구매 리스트 : 회원ID, 이름, 구매상품명, 용량, 총구매금액
SELECT C.CID, C.CNAME, P.PNAME, P.PWEIGHT, S.COST*S.QTY AS 총구매금액
FROM CUSTOMERS C, PRODUCTS P, SALES S
WHERE C.CID=S.CID AND P.PID=S.PID;

--2. 회원별 총구매금액 : 회원아이디, 이름, 총구매금액
SELECT C.CID, C.CNAME, SUM(S.COST*S.QTY) AS 총구매금액
FROM CUSTOMERS C, SALES S
WHERE C.CID=S.CID(+)
GROUP BY C.CID, C.CNAME;

--3. 날짜별 판매금액 : 날짜, 총판매금액
SELECT SDATE, SUM(COST*QTY) AS 총판매금액
FROM SALES GROUP BY SDATE ORDER BY SDATE ASC;

--4. 아이스크림을 구매한 사람들 : 가장 많은 금액부터 정렬
-- 고객아이디, 이름, 평균단가, 총개수, 총금액
SELECT C.CID, C.CNAME,
    ROUND(SUM(S.COST*S.QTY)/SUM(S.QTY),0) AS 평균단가,
    SUM(S.QTY) AS 총개수,
    SUM(S.COST*S.QTY) AS 총금액
FROM CUSTOMERS C, SALES S, PRODUCTS P
WHERE C.CID=S.CID AND P.PID=S.PID AND P.PNAME='아이스크림'
GROUP BY C.CID, C.CNAME
ORDER BY SUM(S.COST*S.QTY) DESC;




















